# -*- coding: utf-8 -*-
"""Evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Js6G01GYjNhvgTIscMj5HTh6-VAUdRdj
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.optimizers.schedules import PolynomialDecay
from tensorflow import keras
from tensorflow.keras.losses import CategoricalFocalCrossentropy,KLDivergence
from tensorflow.keras.callbacks import Callback
from tensorflow.keras.metrics import OneHotMeanIoU
from tensorflow.keras.models import load_model
from tensorflow.keras import layers

os.environ["SM_FRAMEWORK"] = "tf.keras"

from tensorflow import keras
import segmentation_models as sm
from segmentation_models import PSPNet

X_test = np.load('/home/u248490/resize_720/X_test_720.npy')
y_test = np.load('/home/u248490/resize_720/y_test_720.npy')

num_classes = 7
y_test_reshaped = np.zeros((y_test.shape[0], y_test.shape[1], y_test.shape[2], num_classes), dtype=np.uint8)

# Iterate over each class and create the respective channel
for class_idx in range(num_classes):
    y_test_reshaped[:, :, :, class_idx] = (y_test == class_idx).astype(np.uint8)


X_test = X_test.astype('float32')
y_test = y_test_reshaped.astype('float32')

student_model_trained = load_model("/home/u248490/resize_720/KD_mobilenet_64")

# Define your learning rate schedule with the given parameters
base_learning_rate = 0.0001
momentum = 0.9
weight_decay = 0.0001
power = 0.9
auxiliary_loss_weight = 0.4

# Calculate the total number of training steps (you need to adjust this based on your dataset and batch size)
total_steps = 10000

learning_rate_schedule = PolynomialDecay(
    initial_learning_rate=base_learning_rate,
    decay_steps=total_steps,
    end_learning_rate=0,  # You can set this to 0 or any other final learning rate you desire
    power=power
)

# Create the legacy Adam optimizer with the specified momentum and weight decay
optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate_schedule, beta_1=momentum, beta_2=0.999, epsilon=1e-7, weight_decay=weight_decay)

# Compile your model using the custom optimizer and loss
student_model_trained.compile(optimizer=optimizer, loss=tf.keras.losses.CategoricalFocalCrossentropy(),
                      metrics=[tf.keras.metrics.OneHotMeanIoU(num_classes=num_classes)])
evaluation_result = student_model_trained.evaluate(X_test, y_test)

# Print the evaluation results
print("Test Loss:", evaluation_result[0])
print("Test OneHotMeanIoU:", evaluation_result[1])

