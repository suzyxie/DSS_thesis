# -*- coding: utf-8 -*-
"""plots_for_models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/185xeMF5nXF-pq4jssoi4KO42q9KcuCMC
"""

import os
from google.colab import drive
drive.mount('/content/drive')

"""##Student model plots

###without KD
"""

#Functions to plot the results without KD
import matplotlib.pyplot as plt

def load_history(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    history_dict = {
        'loss': [],
        'one_hot_mean_io_u': [],
        'val_loss': [],
        'val_one_hot_mean_io_u': []
    }

    for line in lines:
        if ' - val_loss: ' in line:
            values = line.split(' - ')

            # Find indices of relevant metrics
            loss_index = next((i for i, s in enumerate(values) if 'loss:' in s), None)
            acc_index = next((i for i, s in enumerate(values) if 'one_hot_mean_io_u:' in s), None)
            val_loss_index = next((i for i, s in enumerate(values) if 'val_loss:' in s), None)
            val_acc_index = next((i for i, s in enumerate(values) if 'val_one_hot_mean_io_u:' in s), None)

            # Check if all indices are found
            if None not in [loss_index, acc_index, val_loss_index, val_acc_index]:
                epoch_loss = float(values[loss_index].split(': ')[1])
                epoch_acc = float(values[acc_index].split(': ')[1])
                val_loss = float(values[val_loss_index].split(': ')[1])
                val_acc = float(values[val_acc_index].split(': ')[1])
                history_dict['loss'].append(epoch_loss)
                history_dict['one_hot_mean_io_u'].append(epoch_acc)
                history_dict['val_loss'].append(val_loss)
                history_dict['val_one_hot_mean_io_u'].append(val_acc)

    return history_dict


def plot_history(data_list, label_list, title, ylabel,ax=None):
    epochs = range(1, len(data_list[0]) + 1)

    for data, label in zip(data_list, label_list):
        if ax is not None:
            ax.plot(epochs, data, label=label)
        else:
            plt.plot(epochs, data, label=label)
    if ax is not None:
        ax.set_title(title)
        ax.set_xlabel('Epochs')
        ax.set_ylabel(ylabel)
        ax.legend()
    else:
        plt.title(title)
        plt.xlabel('Epochs')
        plt.ylabel(ylabel)
        plt.legend()

file_path = "/content/drive/MyDrive/model_plotting /student_model_no_KD_64.out"
history_dict_64 = load_history(file_path)
file_path = "/content/drive/MyDrive/model_plotting /student_model_no_KD_16.out"
history_dict_16= load_history(file_path)
fig, axs = plt.subplots(2, 2, figsize=(12, 5))


plot_history(data_list=[history_dict_64['loss'], history_dict_64['val_loss']],
             label_list=['Training loss', 'Validation loss'],
             title='Loss of the student model_64 filters',
             ylabel='Loss', ax=axs[0,0])


plot_history(data_list=[history_dict_64['one_hot_mean_io_u'], history_dict_64['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='one_hot_mean_io_u of the student model_64 filters',
             ylabel='one_hot_mean_io_u', ax=axs[0,1])

plot_history(data_list=[history_dict_16['loss'], history_dict_16['val_loss']],
             label_list=['Training loss', 'Validation loss'],
             title='Loss of the student model_16 filters',
             ylabel='Loss',ax=axs[1,0])


plot_history(data_list=[history_dict_16['one_hot_mean_io_u'], history_dict_16['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='one_hot_mean_io_u of the student model_16 filters',
             ylabel='one_hot_mean_io_u',ax=axs[1,1])
plt.tight_layout()
plt.show()

"""###No pre-trained weights & batchnormalization"""

file_path = "/content/drive/MyDrive/model_plotting /student_model_no_KD_16_no_batchnorm.out"
history_dict_16_no_batchnorm = load_history(file_path)
file_path = "/content/drive/MyDrive/model_plotting /student_model_no_KD_64_no_batchnorm.out"
history_dict_64_no_batchnorm = load_history(file_path)

fig, axs = plt.subplots(2, 2, figsize=(12, 5))

plot_history(data_list=[history_dict_16_no_batchnorm['loss'], history_dict_16_no_batchnorm['val_loss']],
             label_list=['Training loss', 'Validation loss'],
             title='Loss of the student model_16 filters_no_batchnorm ',
             ylabel='Loss', ax=axs[0,0])


plot_history(data_list=[history_dict_16_no_batchnorm['one_hot_mean_io_u'], history_dict_16_no_batchnorm['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='one_hot_mean_io_u of the student model_16 filters_no_batchnorm ',
             ylabel='one_hot_mean_io_u', ax=axs[0,1])

plot_history(data_list=[history_dict_64_no_batchnorm['loss'], history_dict_64_no_batchnorm['val_loss']],
             label_list=['Training loss', 'Validation loss'],
             title='Loss of the student model_64 filters_no_batchnorm ',
             ylabel='Loss', ax=axs[1,0])


plot_history(data_list=[history_dict_64_no_batchnorm['one_hot_mean_io_u'], history_dict_64_no_batchnorm['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='one_hot_mean_io_u of the student model_64 filters_no_batchnorm ',
             ylabel='one_hot_mean_io_u', ax=axs[1,1])


plt.tight_layout()
plt.show()

fig, axs = plt.subplots(1, 1, figsize=(12, 5))
plot_history(data_list=[history_dict_64_no_batchnorm['val_one_hot_mean_io_u'], history_dict_16_no_batchnorm['val_one_hot_mean_io_u']],
             label_list=['Validation one_hot_mean_io_u_64', 'Validation one_hot_mean_io_u_16'],
             title='one_hot_mean_io_u of the student model_no_batchnorm',
             ylabel='one_hot_mean_io_u',ax=axs)
plt.show()

"""200 epochs"""

file_path = "/content/drive/MyDrive/model_plotting /student_model_no_KD_16_no_batchnorm_200.out"
history_dict_16_no_batchnorm_200 = load_history(file_path)
file_path = "/content/drive/MyDrive/model_plotting /student_model_no_KD_64_no_batchnorm_200.out"
history_dict_64_no_batchnorm_200 = load_history(file_path)

fig, axs = plt.subplots(2, 2, figsize=(12, 5))

# plot the training loss and validation loss
plot_history(data_list=[history_dict_16_no_batchnorm_200['loss'], history_dict_16_no_batchnorm_200['val_loss']],
             label_list=['Training loss', 'Validation loss'],
             title='Loss of the student model_16 filters_no_batchnorm_200 ',
             ylabel='Loss', ax=axs[0,0])

plot_history(data_list=[history_dict_16_no_batchnorm_200['one_hot_mean_io_u'], history_dict_16_no_batchnorm_200['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='one_hot_mean_io_u of the student model_16 filters_no_batchnorm_200',
             ylabel='one_hot_mean_io_u', ax=axs[0,1])

plot_history(data_list=[history_dict_64_no_batchnorm_200['loss'], history_dict_64_no_batchnorm_200['val_loss']],
             label_list=['Training loss', 'Validation loss'],
             title='Loss of the student model_64 filters_no_batchnorm_200 ',
             ylabel='Loss', ax=axs[1,0])


plot_history(data_list=[history_dict_64_no_batchnorm_200['one_hot_mean_io_u'], history_dict_64_no_batchnorm_200['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='one_hot_mean_io_u of the student model_64 filters_no_batchnorm_200',
             ylabel='one_hot_mean_io_u', ax=axs[1,1])

plt.tight_layout()
plt.show()

"""###With KD"""

#Functions to plot the results with KD
import matplotlib.pyplot as plt

def load_history(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    history_dict = {
        'one_hot_mean_io_u': [],
        'student_loss':[],
        'distillation_loss': [],
        'val_one_hot_mean_io_u': [],
        'val_student_loss':[]
    }

    for line in lines:
        if '- val_student_loss:' in line:

            values = line.split(' - ')
            # Find indices of relevant metrics
            acc_index = next((i for i, s in enumerate(values) if 'one_hot_mean_io_u:' in s), None)
            loss_index = next((i for i, s in enumerate(values) if 'student_loss:' in s), None)
            distillation_loss_index = next((i for i, s in enumerate(values) if 'distillation_loss:' in s), None)
            val_acc_index = next((i for i, s in enumerate(values) if 'val_one_hot_mean_io_u:' in s), None)
            val_student_loss_index = next((i for i, s in enumerate(values) if 'val_student_loss:' in s), None)


            # Check if all indices are found
            if None not in [ acc_index,loss_index,distillation_loss_index, val_acc_index,val_student_loss_index]:
                epoch_acc = float(values[acc_index].split(': ')[1])
                epoch_loss = float(values[loss_index].split(': ')[1])
                distillation_loss = float(values[distillation_loss_index].split(': ')[1])
                val_acc = float(values[val_acc_index].split(': ')[1])
                val_loss = float(values[val_student_loss_index].split(': ')[1])
                history_dict['one_hot_mean_io_u'].append(epoch_acc)
                history_dict['student_loss'].append(epoch_loss)
                history_dict['distillation_loss'].append(distillation_loss)
                history_dict['val_one_hot_mean_io_u'].append(val_acc)
                history_dict['val_student_loss'].append(val_loss)

    return history_dict

def plot_history(data_list, label_list, title, ylabel,ax=None):
    epochs = range(1, len(data_list[0]) + 1)

    for data, label in zip(data_list, label_list):
        if ax is not None:
            ax.plot(epochs, data, label=label)
        else:
            plt.plot(epochs, data, label=label)
    if ax is not None:
        ax.set_title(title)
        ax.set_xlabel('Epochs')
        ax.set_ylabel(ylabel)
        ax.legend()
    else:
        plt.title(title)
        plt.xlabel('Epochs')
        plt.ylabel(ylabel)
        plt.legend()

file_path = "/content/drive/MyDrive/model_plotting /KD_64_filters.out"
history_dict_64_kd = load_history(file_path)
file_path = "/content/drive/MyDrive/model_plotting /KD_16_filters.out"
history_dict_16_kd = load_history(file_path)

fig, axs = plt.subplots(2, 2, figsize=(12, 5))

plot_history(data_list=[history_dict_64_kd['student_loss'],history_dict_64_kd['distillation_loss'], history_dict_64_kd['val_student_loss']],
             label_list=['Training loss','Distillation Loss', 'Validation loss'],
             title='KD_loss of the student model_64 filters',
             ylabel='Loss',ax=axs[0,0])


plot_history(data_list=[history_dict_64_kd['one_hot_mean_io_u'], history_dict_64_kd['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='KD_one_hot_mean_io_u of the student model_64 filters',
             ylabel='one_hot_mean_io_u',ax=axs[0,1])

plot_history(data_list=[history_dict_16_kd['student_loss'],history_dict_16_kd['distillation_loss'], history_dict_16_kd['val_student_loss']],
             label_list=['Training loss','Distillation Loss', 'Validation loss'],
             title='KD_loss of the student model_16 filters',
             ylabel='Loss',ax=axs[1,0])

# plot the training one_hot_mean_io_u and validation one_hot_mean_io_u
plot_history(data_list=[history_dict_16_kd['one_hot_mean_io_u'], history_dict_16_kd['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='KD_one_hot_mean_io_u of the student model_16 filters',
             ylabel='one_hot_mean_io_u',ax=axs[1,1])

plt.tight_layout()
plt.show()

fig, axs = plt.subplots(1, 2, figsize=(12, 5))
plot_history(data_list=[history_dict_64['val_one_hot_mean_io_u'], history_dict_64_kd['val_one_hot_mean_io_u']],
             label_list=['Validation one_hot_mean_io_u no KD', 'Validation one_hot_mean_io_u with KD'],
             title='one_hot_mean_io_u of the student model_64 filters',
             ylabel='one_hot_mean_io_u',ax=axs[0])

plot_history(data_list=[history_dict_16['val_one_hot_mean_io_u'], history_dict_16_kd['val_one_hot_mean_io_u']],
             label_list=['Validation one_hot_mean_io_u no KD', 'Validation one_hot_mean_io_u with KD'],
             title='one_hot_mean_io_u of the student model_16 filters',
             ylabel='one_hot_mean_io_u',ax=axs[1])

plt.tight_layout()
plt.show()

"""No pre-trained weight & batchnormalization 200 epochs"""

file_path = "/content/drive/MyDrive/model_plotting /16_filters_nobatchnorm_200epochs.out"
history_dict_16_kd_200 = load_history(file_path)

file_path = "/content/drive/MyDrive/model_plotting /64_filters_nobatchnorm_200epochs.out"
history_dict_64_kd_200 = load_history(file_path)

fig, axs = plt.subplots(2, 2, figsize=(12, 5))

plot_history(data_list=[history_dict_16_kd_200['student_loss'],history_dict_16_kd_200['distillation_loss'], history_dict_16_kd_200['val_student_loss']],
             label_list=['Training loss','Distillation Loss', 'Validation loss'],
             title='KD_loss of the student model_16 filters_200',
             ylabel='Loss',ax=axs[0,0])


plot_history(data_list=[history_dict_16_kd_200['one_hot_mean_io_u'], history_dict_16_kd_200['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='KD_one_hot_mean_io_u of the student model_16 filters_200',
             ylabel='one_hot_mean_io_u',ax=axs[0,1])

plot_history(data_list=[history_dict_64_kd_200['student_loss'],history_dict_64_kd_200['distillation_loss'], history_dict_64_kd_200['val_student_loss']],
             label_list=['Training loss','Distillation Loss', 'Validation loss'],
             title='KD_loss of the student model_64 filters_200',
             ylabel='Loss',ax=axs[1,0])

# plot the training one_hot_mean_io_u and validation one_hot_mean_io_u
plot_history(data_list=[history_dict_64_kd_200['one_hot_mean_io_u'], history_dict_64_kd_200['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='KD_one_hot_mean_io_u of the student model_64 filters_200',
             ylabel='one_hot_mean_io_u',ax=axs[1,1])

plt.tight_layout()
plt.show()

fig, axs = plt.subplots(1, 2, figsize=(12, 5))
plot_history(data_list=[history_dict_64_no_batchnorm_200['val_one_hot_mean_io_u'], history_dict_64_kd_200['val_one_hot_mean_io_u']],
             label_list=['Validation one_hot_mean_io_u no KD', 'Validation one_hot_mean_io_u with KD'],
             title='one_hot_mean_io_u of the student model_64 filters_200',
             ylabel='one_hot_mean_io_u',ax=axs[0])

plot_history(data_list=[history_dict_16_no_batchnorm_200['val_one_hot_mean_io_u'], history_dict_16_kd_200['val_one_hot_mean_io_u']],
             label_list=['Validation one_hot_mean_io_u no KD', 'Validation one_hot_mean_io_u with KD'],
             title='one_hot_mean_io_u of the student model_16 filters_200',
             ylabel='one_hot_mean_io_u',ax=axs[1])

plt.tight_layout()
plt.show()

"""##Teacher Model Plot"""

import matplotlib.pyplot as plt

def load_history(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    history_dict = {
        'loss': [],
        'one_hot_mean_io_u': [],
        'val_loss': [],
        'val_one_hot_mean_io_u': []
    }

    for line in lines:
        if ' - val_loss: ' in line:
            values = line.split(' - ')

            # Find indices of relevant metrics
            loss_index = next((i for i, s in enumerate(values) if 'loss:' in s), None)
            acc_index = next((i for i, s in enumerate(values) if 'one_hot_mean_io_u:' in s), None)
            val_loss_index = next((i for i, s in enumerate(values) if 'val_loss:' in s), None)
            val_acc_index = next((i for i, s in enumerate(values) if 'val_one_hot_mean_io_u:' in s), None)

            # Check if all indices are found
            if None not in [loss_index, acc_index, val_loss_index, val_acc_index]:
                epoch_loss = float(values[loss_index].split(': ')[1])
                epoch_acc = float(values[acc_index].split(': ')[1])
                val_loss = float(values[val_loss_index].split(': ')[1])
                val_acc = float(values[val_acc_index].split(': ')[1])
                history_dict['loss'].append(epoch_loss)
                history_dict['one_hot_mean_io_u'].append(epoch_acc)
                history_dict['val_loss'].append(val_loss)
                history_dict['val_one_hot_mean_io_u'].append(val_acc)

    return history_dict


def plot_history(data_list, label_list, title, ylabel,ax=None):
    epochs = range(1, len(data_list[0]) + 1)

    for data, label in zip(data_list, label_list):
        if ax is not None:
            ax.plot(epochs, data, label=label)
        else:
            plt.plot(epochs, data, label=label)
    if ax is not None:
        ax.set_title(title)
        ax.set_xlabel('Epochs')
        ax.set_ylabel(ylabel)
        ax.legend()
    else:
        plt.title(title)
        plt.xlabel('Epochs')
        plt.ylabel(ylabel)
        plt.legend()

file_path = "/content/drive/MyDrive/model_plotting /teacher_model_128.out"
history_dict_teacher_128 = load_history(file_path)
fig, axs = plt.subplots(1, 2, figsize=(12, 5))
# plot the training loss and validation loss
plot_history(data_list=[history_dict_teacher_128['loss'], history_dict_teacher_128['val_loss']],
             label_list=['Training loss', 'Validation loss'],
             title='Loss of the teacher model_128 filters',
             ylabel='Loss', ax=axs[0])

# plot the training one_hot_mean_io_u and validation one_hot_mean_io_u
plot_history(data_list=[history_dict_teacher_128['one_hot_mean_io_u'], history_dict_teacher_128['val_one_hot_mean_io_u']],
             label_list=['Training one_hot_mean_io_u', 'Validation one_hot_mean_io_u'],
             title='one_hot_mean_io_u of the teacher model_128 filters',
             ylabel='one_hot_mean_io_u', ax=axs[1])

plt.tight_layout()
plt.show()

